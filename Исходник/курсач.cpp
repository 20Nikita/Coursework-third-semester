#include <iostream>
#include <fstream>
#include <string>
#include <windows.h>
#include <iomanip>

//1. Сформулировать функциональные и нефункциональные требования к информационной файловой системе своего варианта.
//2. Спроектировать структуры данных для заданной предметной области.
//3. Реализовать информационную систему средствами С++.
//Предметная область - бухгалтерия предприятия.
//Решаемые задачи :
//• учет труда и зарплаты работников;
//• табель учета рабочего времени составляется по подразделениям и включает\
   ФИО работника, должность, количество отработанных часов и количество нерабочих дней за месяц;
//• формирование ведомостей на выплату зарплаты.

const char FNAME[] = "maillist";		//файл с данными
const char FNAME2[] = "maillist2";		//файл с данными
const char FNAME_сегодня[] = "Text1";	//индефекаторы присутствующих сотрудников
const char FNAME_копия[] = "Text_copi";	//старая копия


//основные возможности
void Запись_нового_сотрудника(struct структура* работник, int N, const char FNAME[]);
void Заполнение_посищаемости(struct структура* работник, int N, const char FNAME[], const char FNAME1[]);
void Состовление_ведомости(struct структура* работник, int N, const char FNAME[]);
void Подразделение(const char FNAME[]);
void перезапись(struct структура* работник, int N, const char FNAME[]);
void удаление(struct структура* работник, int N, const char FNAME[]);
using namespace std;

int max_должность = 20;	//длинна самой длнной должности
int max_ФИО = 57;	//длина фио

struct структура
{
	char ФИО[3][19];
	int должность;
	int код;
	int часы[31] = { 0 };
};

string Должности[12] = {
	"Админестратор",
	"Архитектор",
	"Бугалтер",
	"Водитель",
	"Генеральный деректор",
	"Деректор",
	"Лифтер",
	"Менеджер",
	"Программист",
	"Пилот",
	"Слесорь",
	"Уборщик" };

int main()
{
	//подключение русского языка
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	system("color F0");	//фон белый буквы черные
	int номер;
	cout << "Введите номер подразделения: ";
	cin >> номер;
	if (номер == 1)
		Подразделение(FNAME);
	else if (номер == 2)
		Подразделение(FNAME2);
}

/* Сохранение списка. */
void запись_структуры(struct структура* работник, int N, const char FNAME[])
{
	FILE* fp;
	register int i;
	if ((fp = fopen(FNAME, "wb")) == NULL) {
		printf("Ошибка при открытии файла.\n");
		return;
	}
	fwrite(&N, sizeof(N), 1, fp);
	for (i = 0; i < N; i++)
		if (fwrite(&работник[i],
			sizeof(struct структура), 1, fp) != 1)
			printf("Ошибка при записи файла.\n");
	fclose(fp);
}
/* Загрузить файл. */
void чтение_структуры(struct структура* работник, int N, const char FNAME[])
{
	FILE* fp;
	register int i;
	if ((fp = fopen(FNAME, "rb")) == NULL) {
		printf("Ошибка при открытии файла.\n");
		return;
	}
	fread(&N, sizeof(N), 1, fp);
	for (i = 0; i < N; i++)
		if (fread(&работник[i],
			sizeof(struct структура), 1, fp) != 1) {
			if (feof(fp)) break;
			printf("Ошибка при чтении файла.\n");
		}
	fclose(fp);
}
void Подразделение(const char FNAME[])
{
	system("cls");	//отчистка экрана
	int N, Команда = 1;
	string код;
	cout << "Введите пароль: ";
	cin >> код;
	if (код == "3")
		while (Команда)
		{
			FILE* fp = fopen(FNAME, "rb");
			fread(&N, sizeof(N), 1, fp); fclose(fp);
			//создание структуры
			структура* работник = new структура[N];
			чтение_структуры(работник, N, FNAME);
			//чтение_структуры(работник, FNAME, FNAME2);
			system("cls");	//отчистка экрана
			cout << "Чтобы заполнить посящаемость введите: 1";
			cout << "\nДля записи нового сотрудника введите: 2";
			cout << "\nЧтобы составить ведомость зарплаты введите: 3";
			cout << "\nЧтобы создать копию данных и обнулить текущие введите: 4";
			cout << "\nЧтобы удалить сотрудника из базы: 5";
			cout << "\nВыход: 0, или закройте кансоль";
			cout << "\n\nКод действия: ";
			cin >> Команда;
			if (Команда == 1)
				Заполнение_посищаемости(работник, N, FNAME, FNAME_сегодня);
			else	if (Команда == 2)
				Запись_нового_сотрудника(работник, N, FNAME);
			else if (Команда == 3)
				Состовление_ведомости(работник, N, FNAME);
			else if (Команда == 4)
				перезапись(работник, N, FNAME);
			else if (Команда == 5)
				удаление(работник, N, FNAME);
			//запись_структуры(работник, N, FNAME);
			delete[] работник;
		}
}

void Сортировка(struct структура* работник, int N, const char FNAME[]) {
	string Min;		//минимальный элемент
	int jMin;		//индекс минимального элемента
	int iSort = 0;	//граница отсортированной области
	int j, i;		//индексная переменная
	структура Temp;	//обменная переменная
	string ФИО;		//обменная переменная
	//--------------Сортировка по именам---------------------
	for (iSort = 0; iSort < N - 1; iSort++)
	{
		ФИО.clear();
		for (i = 0; i < 3; i++)
			ФИО += работник[iSort].ФИО[i];

		//первый элемент из неупорядоченных назначаем минимальным
		Min = ФИО;			//минимум
		jMin = iSort;		//его индекс

		//ищем минимальный элемент в оставшейся части массива
		for (j = iSort + 1; j < N; j++)
		{
			ФИО.clear();
			for (i = 0; i < 3; i++)
				ФИО += работник[j].ФИО[i];
			if (ФИО < Min)	//очередной кандидат на минимальный
			{
				//запоминаем минимальный элемент и его номер
				Min = ФИО;
				jMin = j;
			}//if

		}//for j

		//нашли минимум в неупорядоченной части массива
		//ставим его на место первого в неупорядоченной части массива
		//меняем элементы местами
		Temp = работник[iSort];
		работник[iSort] = работник[jMin];
		работник[jMin] = Temp;

	} //for iSort
}

void Запись_нового_сотрудника(struct структура* работник, int N, const char FNAME[]) {
	system("cls");	//отчистка экрана
	int Код_сотрудника;
	int t = 0;
	структура новый_сотрудник;
	cout << "Введите ФИО сотрудника: ";
	cin >> новый_сотрудник.ФИО[0] >> новый_сотрудник.ФИО[1] >> новый_сотрудник.ФИО[2];
	system("cls");	//отчистка экрана

	cout << "Введите код должности сотрудника из представленных ";
	//ввод должности сотрудника
	while (t < 1 || t > 12)
	{
		system("cls");	//отчистка экрана
		//печать возможных должностей
		for (int i = 0; i < 12; i++)
			cout << "\n" << Должности[i] << ": " << i + 1;
		cout << "\n\nКод должности сотрудника: ";
		cin >> t;
		//защита от дураков
		if (t < 1 || t > 12)
		{
			cout << "\nНет такой должности\n";
			system("PAUSE");
		}
	}
	новый_сотрудник.должность = t;

	system("cls");	//отчистка экрана
	//ввод личного кода сотрудника
	t = 0;
	do {
		if (t)
			cout << "\nсотрудник с таким кодом уже существует\n";
		cout << "Персональный код сотрудника: ";
		cin >> новый_сотрудник.код;
		t = 0;
		//код уже существует
		for (int i = 0; i < N; i++)
		{
			if (работник[i].код == новый_сотрудник.код)
				t = 1;
		}
	} while (t);
	//создали новый масив структур работников
	//переписали в него старый а в конец 
	//нового сотрудника
	структура* работник2 = new структура[N + 1];
	for (int i = 0; i < N; i++)
	{
		работник2[i] = работник[i];
	}работник2[N] = новый_сотрудник;

	Сортировка(работник2, N + 1, FNAME);
	запись_структуры(работник2, N + 1, FNAME);
	delete[] работник2;
}

void Кто_был(const char FNAME1[]) {
	FILE* fp = fopen(FNAME1, "wb");
	int Код_сотрудника = -1;
	int число = 32;
	system("cls");	//отчистка экрана
	//ввод числа
	while (число < 1 || число > 31)
	{
		cout << "Введите сегодняшнее число: ";
		cin >> число;
		//защита от дураков
		if (число < 1 || число > 31) {
			system("cls");
			cout << "Неверный ввод числа\n";
		}
		else
			fwrite(&число, sizeof(int), 1, fp);
	}
	//пока не введут 0
	while (Код_сотрудника != 0)
	{
		system("cls");	//отчистка экрана
		cout << "Введите свой персональный код: ";
		cin >> Код_сотрудника;
		fwrite(&Код_сотрудника, sizeof(Код_сотрудника), 1, fp);
	}
	fclose(fp);
	system("cls");	//отчистка экрана
}

void Заполнение_посищаемости(struct структура* работник, int N, const char FNAME[], const char FNAME1[]) {
	system("cls");		//отчистка экрана
	int Часы_работы;
	int Число;
	int N1 = 0;			//сколько людей записалось
	int j, i;

	Кто_был(FNAME1);

	//считаю количество записавшихся
	FILE* in1 = fopen(FNAME1, "rb");
	fread(&Число, sizeof(int), 1, in1);//чтение числа
	while (fread(&i, sizeof(int), 1, in1) == 1) {
		N1++;
	}fclose(in1);

	//чтение принятых индификаторов присуствия
	FILE* out1 = fopen(FNAME1, "rb");
	int* ЛКод = new int[N1];
	fread(&i, sizeof(int), 1, out1);//уход с 1-го элемента
	for (i = 0; i < N1; i++)
		fread(&ЛКод[i], sizeof(int), 1, out1);
	fclose(out1);

	//создание и обнуление флагов присуствия
	bool* f = new bool[N];
	for (j = 0; j < N; j++)
		f[j] = 0;

	//сравнение присутствуюших с базай
	for (j = 0; j < N; j++)
		for (i = 0; i < N1; i++)
			if (ЛКод[i] == работник[j].код)
				f[j] = 1;

	//дополнение данных
	for (j = 0; j < N; j++) {

		if (f[j]) {
			Часы_работы = -1;//опустить флаг
			//ввод часов работы
			while (Часы_работы < 0 || Часы_работы > 24)
			{
				for (int i = 0; i < 3; i++)
					cout << работник[j].ФИО[i] << " ";
				cout << "\nОн сегодня работал: ";
				cin >> Часы_работы;
				//защита от дурака
				if (Часы_работы < 0 || Часы_работы > 24) {
					system("cls");
					cout << "Он не мог столько работать\n";
				}
				else
					работник[j].часы[Число - 1] = Часы_работы;
			}
		}
		system("cls");	//отчистко экрана
	}
	запись_структуры(работник, N, FNAME);
	//запись_структуры(работник, N, FNAME, FNAME2);
	delete[] ЛКод; delete[] f;
}

//подключение английского языка
void a() {
	SetConsoleCP(866);
	SetConsoleOutputCP(866);
}
//подключение русского языка
void r() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
}
void шапка(int max, int max_должность) {
	//начало шапки
	a();
	cout << char(218) << setfill(char(196)) << setw(6);
	cout << char(194) << setfill(char(196)) << setw(max + 3);
	cout << char(194) << setfill(char(196)) << setw(max_должность + 3);
	cout << char(194) << setfill(char(196)) << setw(13);
	for (size_t m = 0; m < 31; m++)
		cout << char(194) << setfill(char(196)) << setw(3);
	cout << char(194) << setfill(char(196)) << setw(13);
	cout << char(191);
	cout << "\n";

	//шапка номера
	cout << char(179);
	r(); cout << "  №  "; a();

	//шапка ФИО
	int i = (max + 3) / 2;
	cout << char(179);
	r(); cout << setfill(char(32)) << setw(i) << " ФИО"; a();
	if ((max + 3) % 2 == 1)
		i += 1;
	cout << setfill(char(32)) << setw(i);

	//шапка должности
	cout << char(179);
	r(); cout << "       Должность      "; a();

	//шапка рабочих дней
	cout << char(179);
	r(); cout << "Рабочих дней"; a();

	//шапки часов работ
	for (size_t m = 0; m < 31; m++)
		cout << char(179) << setfill(char(32)) << setw(2) << m + 1;

	//шапка зарплаты
	cout << char(179);
	r(); cout << "  Зарплата  "; a();
	cout << char(179);

	cout << "\n";
}
void отчерк() {
	cout << char(195) << setfill(char(196)) << setw(6);					//номер
	cout << char(197) << setfill(char(196)) << setw(max_ФИО + 3);		//ФИО
	cout << char(197) << setfill(char(196)) << setw(max_должность + 3);	//должность
	cout << char(197) << setfill(char(196)) << setw(13);				//рабочие дни
	for (size_t m = 0; m < 31; m++)										//часы работ
		cout << char(197) << setfill(char(196)) << setw(3);
	cout << char(197) << setfill(char(196)) << setw(13) << char(180);	//зарплата

	cout << "\n";
}
void серкдина(int N, string ФИО, int Должность, int Час[31], int колличество_рабочих_дней, int колличество_отработанных_часов) {
	int Зарплата[12] = { 100,150,200,150,10000,1000,80,90,5000,1200,100,50 };
	cout << char(179) << " " << setfill(char(32)) << setw(3) << N << " ";
	cout << char(179);
	r(); cout << " " << left << setfill(char(32)) << setw(max_ФИО) << ФИО << " " << right; a();

	cout << char(179);
	r(); cout << " " << left << setfill(char(32)) << setw(max_должность) << Должности[Должность - 1] << " " << right; a();
	cout << char(179);

	r(); cout << " " << left << setfill(char(32)) << setw(10) << колличество_рабочих_дней << " " << right; a();

	for (size_t i = 0; i < 31; i++)
	{
		if (Час[i])
			cout << char(179) << setfill(char(32)) << setw(2) << Час[i];
		else
			cout << char(179) << " H";
	}
	cout << char(179);

	cout << " " << setfill(char(32)) << setw(10) << колличество_отработанных_часов * Зарплата[Должность - 1] << " ";
	cout << char(179) << "\n";
}

void конец() {
	cout << char(192) << setfill(char(196)) << setw(6);					//номер
	cout << char(193) << setfill(char(196)) << setw(max_ФИО + 3);		//ФИО
	cout << char(193) << setfill(char(196)) << setw(max_должность + 3);	//должность
	cout << char(193) << setfill(char(196)) << setw(13);				//рабочие дни
	for (size_t m = 0; m < 31; m++)										//часы работ
		cout << char(193) << setfill(char(196)) << setw(3);
	cout << char(193) << setfill(char(196)) << setw(13) << char(217);	//зарплата

	cout << "\n\n\n"; r();
}
void Состовление_ведомости(struct структура* работник, int N, const char FNAME[]) {
	int Должность;
	int i, j;
	string ФИО;
	system("cls");
	шапка(max_ФИО, max_должность);	//печать начала таблици
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < 3; j++) {
			ФИО.append(работник[i].ФИО[j]); //дописать в конец ФИО
			ФИО.push_back(' ');//дописать пробел
		}
		//считаю колличество рабочих дней
		int колличество_рабочих_дней = 0;
		for (size_t m = 0; m < 31; m++)
			if (работник[i].часы[m])
				колличество_рабочих_дней++;

		int колличество_отработанных_часов = 0;
		for (size_t m = 0; m < 31; m++)
			колличество_отработанных_часов += работник[i].часы[m];
		отчерк();	//рисую отчерк
		серкдина(i + 1, ФИО, работник[i].должность, работник[i].часы, колличество_рабочих_дней, колличество_отработанных_часов);
		ФИО.clear(); //отчистка буферов
	}
	конец();
	system("PAUSE");
}

void перезапись(struct структура* работник, int N, const char FNAME[])
{
	system("cls");		//отчистка экрана
	char s[256];		//буфер

	запись_структуры(работник, N, FNAME_копия);
	//обнуление часов
	for (int j = 0; j < N; j++)
		for (int i = 0; i < 31; i++)
			работник[j].часы[i] = 0;

	запись_структуры(работник, N, FNAME);
	cout << "Перезапись прошла успешно, данные за прошлый месяц хранятся в файле \"Text_copi\"\n";
	system("PAUSE");
}
void удаление(struct структура* работник, int N, const char FNAME[])
{
	int уволеный;
	system("cls");		//отчистка экрана
	cout << "Введите порядковый номер уволившегося сотрудника: ";
	cin >> уволеный;
	if (уволеный > N || уволеный < 1)
	{
		cout << "\nНет такого сотрудника\n"; system("PAUSE");
		return;
	}
	for (int i = 0; i < max_ФИО / 3; i++)
		работник[уволеный - 1].ФИО[0][i] = 'я';
	Сортировка(работник, N, FNAME);
	запись_структуры(работник, N - 1, FNAME);
}